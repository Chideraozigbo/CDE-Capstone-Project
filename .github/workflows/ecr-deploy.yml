name: Deploy to Amazon ECR

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: cde-project

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to ECR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to get all tags

    - name: Get next version
      id: get-version
      run: |
        # Get the latest tag or start at 1.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0")
        
        # Extract major and minor versions
        MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
        MINOR=$(echo $LATEST_TAG | cut -d. -f2)
        
        # Increment minor version
        NEW_MINOR=$((MINOR + 1))
        NEW_TAG="${MAJOR}.${NEW_MINOR}"
        
        # Set output for later steps
        echo "version=${NEW_TAG}" >> $GITHUB_OUTPUT
        
        # Create and push new tag
        git tag $NEW_TAG
        git push origin $NEW_TAG

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VERSION: ${{ steps.get-version.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
        # Also tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest